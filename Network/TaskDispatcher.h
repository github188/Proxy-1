//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : TaskDispatcher.h
//  @ Date : 2011-1-21
//  @ Author : chenjinyi
//
//


#if !defined(_CTASKDISPATCHER_H)
#define _CTASKDISPATCHER_H

#include <list>
using namespace std;

#include "../Thread/AbstractThread.h"
#include "../Thread/Mutex.h"
#include "Session.h"
#include "Network.h"

class CSession;
class CNetwork;
class CMutex;
class CCondition;

struct SessionResponsibility
{
    int responsibility;
    CSession* pSession;
};

struct PacketInfo
{
    CSession* pSession;
    char* pData;
    int dataSize;
};

class CTaskDispatcher : public CAbstractThread
{
public:
    CTaskDispatcher();
    virtual ~CTaskDispatcher();

    virtual int Dispatch(CSession* pSession, const char* pData, int dataSize);
    virtual void EventCallBack(CSession* pSession, short event);

    virtual void Quit() { m_bQuit = true; }

protected:
    virtual void Run();

protected:
    bool m_bQuit;

    void PutPacketInfo(CSession* pSession, const char* pData, int dataSize);
    PacketInfo GetPacketInfo();

    virtual void ProcessPacketInfo(const PacketInfo& packet);

    void ClearAllData();

    list<PacketInfo> m_lPacketList;

    CMutex m_packetInfoMutex;
    CCondition m_packetInfoCond;
};

#endif  //_CTASKDISPATCHER_H
